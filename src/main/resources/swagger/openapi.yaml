openapi: 3.0.0
info:
  title: User service
  version: "0.1"
  description: User service API
tags:
  - name: User

servers:
  - url: /user-service/api/v1

paths:
  # ========================================
  # ===== User API
  # ========================================
  /users:
    post:
      tags:
        - User
      operationId: createUser
      security:
        - apiKeyAuth: [ ]
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      responses:
        "201":
          description: Returns created user model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      operationId: retrieveUser
      security:
        - apiKeyAuth: [ ]
        - userAuth: [ ]
      responses:
        "200":
          description: Returns user model
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - User
      operationId: deleteUser
      security:
        - apiKeyAuth: [ ]
      responses:
        "200":
          description: Empty response with status code that user has been deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  parameters:
    PageQueryParameter:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 30
        default: 10
    UnlimSizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 100000
        default: 10

  # ========================================
  # ===== Request bodies
  # ========================================
  requestBodies:
    CreateUserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      required: true
  securitySchemes:
    userAuth:
      type: apiKey
      in: header
      name: Authorization

    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  # ========================================
  # ===== Schemas
  # ========================================
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        displayName:
          type: string
        customClaims:
          type: array
          items:
            type: string
        createdAt:
          description: This is the created date for the user entry in database.
          type: string
          format: date-time
          readOnly: true
      required:
        - id
    Error:
      required:
        - message
      properties:
        message:
          type: string
        errorCode:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      required:
        - message
        - field
      properties:
        errorCode:
          type: string
        message:
          type: string
        field:
          type: string

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
