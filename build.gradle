buildscript {
    ext {
        basePackage = "com.service"
        testcontainersVersion = "1.17.2"
        springfoxSwaggerVersion = "2.9.2"
        swaggerAnnotationsVersion = "1.6.2"
        openApiVersion = '5.2.1'
        mapstructVersion = '1.5.1.Final'
        javaFakerVersion = "1.0.2"
        awsSdkVersion = '1.12.239'
        sentryVersion = "6.1.3"
        r4jVersion = "1.7.1"
        lombockVersion = "1.18.20"
        jacksonDatabindNullableVersion = "0.2.1"
        firebaseVersion = "9.0.0"
        hibernateTypesVersion = '2.16.2'
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:${openApiVersion}"
    }
}

plugins {
    id "org.springframework.boot" version "2.7.0"
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'java'
}

apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'
apply plugin: 'jacoco'

apply from: "gradle/swagger.gradle"
apply from: "gradle/mapstruct.gradle"
apply from: "gradle/checkstyle.gradle"
apply from: "gradle/jacoco.gradle"
apply from: "gradle/pmd.gradle"

group = 'com.'
version = '0.1'
sourceCompatibility = '17'

configurations {
    testAnnotationProcessor.extendsFrom annotationProcessor
    testCompileOnly.extendsFrom compileOnly
}


repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    //    spring libraries
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-mustache"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-security"

    // google
    implementation "com.google.firebase:firebase-admin:${firebaseVersion}"

    // database
    implementation "org.flywaydb:flyway-core"
    implementation "com.vladmihalcea:hibernate-types-52:${hibernateTypesVersion}"

    // aws
    implementation "com.amazonaws:aws-java-sdk:${awsSdkVersion}"
    implementation "com.amazonaws:aws-java-sdk-s3:${awsSdkVersion}"


    // swagger
    implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"
    //required by the codegen plugin
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"

    // useful libraries
    implementation "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    implementation "org.yaml:snakeyaml:1.29"
    implementation "io.sentry:sentry-spring-boot-starter:${sentryVersion}"
    implementation("io.github.resilience4j:resilience4j-core:${r4jVersion}")
    implementation("io.github.resilience4j:resilience4j-retry:${r4jVersion}")

    runtimeOnly "org.postgresql:postgresql"


    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    // should be declared after lombok !
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
}
